import pandas as pd
import os
from sklearn.tree import DecisionTreeClassifier

class Nodo_paciente:
    def __init__(self, datos):
        self.datos = datos
        self.siguiente = None

class Lista_enlazada_pacientes:
    def __init__(self):
        self.cabeza = None

    def agregar_paciente(self, datos_paciente):
        nuevo = Nodo_paciente(datos_paciente)
        if not self.cabeza:
            self.cabeza = nuevo
        else:
            actual = self.cabeza
            while actual.siguiente:
                actual = actual.siguiente
            actual.siguiente = nuevo
        print("‚úÖ Paciente agregado a la lista.")

    def mostrar_lista(self):
        lista_datos = []
        actual = self.cabeza
        while actual:
            lista_datos.append(actual.datos)
            actual = actual.siguiente

        if lista_datos:
            df = pd.DataFrame(lista_datos)
            print("\nüìã Lista de pacientes:")
            print(df)
        else:
            print("üì≠ No hay pacientes registrados.")

    def buscar_paciente_por_cedula(self, cedula):
        actual = self.cabeza
        while actual:
            if actual.datos["CC"] == cedula:
                print("‚úÖ Paciente encontrado:")
                print(pd.DataFrame([actual.datos]))
                return actual.datos
            actual = actual.siguiente
        print("‚ùå Paciente no encontrado.")
        return None

    def eliminar_paciente_por_cedula(self, cedula):
        actual = self.cabeza
        anterior = None
        encontrado = False

        while actual:
            if actual.datos["CC"] == cedula:
                encontrado = True
                if anterior:
                    anterior.siguiente = actual.siguiente
                else:
                    self.cabeza = actual.siguiente
                print(f"üóëÔ∏è Paciente con c√©dula {cedula} eliminado de la lista.")
                break
            anterior = actual
            actual = actual.siguiente

        if not encontrado:
            print(f"‚ùå Paciente con c√©dula {cedula} no encontrado.")
        return encontrado

    def convertir_a_lista(self):
        lista = []
        actual = self.cabeza
        while actual:
            lista.append(actual.datos)
            actual = actual.siguiente
        return lista

    def guardar_en_excel(self, ruta_archivo):
        df = pd.DataFrame(self.convertir_a_lista())
        df.to_excel(ruta_archivo, index=False)
        print("üíæ Datos guardados en Excel.")

    def cargar_desde_excel(self, ruta_archivo):
     if os.path.exists(ruta_archivo):
         df = pd.read_excel(ruta_archivo)
         for _, fila in df.iterrows():
             datos_paciente = {
                 "CC": str(fila["CC"]).strip(),
                 "Nombre": str(fila["Nombre"]).strip(),
                 "Edad": str(fila["Edad"]).strip(),
                 "Diagn√≥stico": str(fila["Diagn√≥stico"]).strip()
             }
             self.agregar_paciente(datos_paciente)
         print("üìÇ Datos cargados desde el archivo.")
     else:
         print("‚ö†Ô∏è Archivo Excel no encontrado. Se crear√° uno nuevo al guardar.")


#  √Årbol de decisiones  
def crear_y_entrenar_modelo():
    # Datos de entrenamiento ficticios para crear un modelo inicial
    X = [
    [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0],  # Enfermedad Respiratoria Com√∫n
    [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0],  # Tuberculosis
    [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1],  # C√°ncer de Pulm√≥n
    [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0],  # Enfermedad Respiratoria Com√∫n
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],  # Enfermedad Respiratoria Com√∫n
    [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0],  # Tuberculosis
    [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0],  # Tuberculosis
    [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0],  # Enfermedad Respiratoria Com√∫n
    [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],  # C√°ncer de Pulm√≥n
    [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1],  # Enfermedad Respiratoria Com√∫n
    [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0],  # Tuberculosis
    [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1],  # C√°ncer de Pulm√≥n
    [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1],  # C√°ncer de Pulm√≥n
    [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],  # Enfermedad Respiratoria Com√∫n
    [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0]   # Tuberculosis
    ]
    y = [ 'Enfermedad Respiratoria Com√∫n',  # Paciente con s√≠ntomas t√≠picos de enfermedad respiratoria
    'Tuberculosis',  # Paciente con s√≠ntomas t√≠picos de tuberculosis
    'C√°ncer de Pulm√≥n',  # Paciente con s√≠ntomas t√≠picos de c√°ncer de pulm√≥n
    'Enfermedad Respiratoria Com√∫n',
    'Enfermedad Respiratoria Com√∫n',
    'Tuberculosis',
    'Tuberculosis',
    'Enfermedad Respiratoria Com√∫n',
    'C√°ncer de Pulm√≥n',
    'Enfermedad Respiratoria Com√∫n',
    'Tuberculosis',
    'C√°ncer de Pulm√≥n',
    'C√°ncer de Pulm√≥n',
    'Enfermedad Respiratoria Com√∫n',
    'Tuberculosis']
    
    clf = DecisionTreeClassifier(random_state=42)
    clf.fit(X, y)
    
    return clf

#  Funci√≥n para capturar datos del paciente y hacer diagn√≥stico 
def capturar_datos(lista, modelo):
    CC = input("Ingrese la c√©dula del paciente: ").strip()
    
    # Evitar c√©dulas repetidas
    if lista.buscar_paciente_por_cedula(CC):
        print("‚ö†Ô∏è Ya existe un paciente con esa c√©dula.")
        return

    nombre = input("Ingrese el nombre del paciente: ").strip()
    edad = input("Ingrese la edad del paciente: ").strip()

    # Captura de s√≠ntomas
    tos = int(input("¬øTienes tos persistente o recurrente? (1=S√≠, 0=No): "))
    fiebre = int(input("¬øHas tenido fiebre recientemente? (1=S√≠, 0=No): "))
    dificultad_respirar = int(input("¬øSientes dificultad para respirar o falta de aire al realizar actividades cotidianas? (1=S√≠, 0=No): "))
    moco = int(input("¬øHas notado un aumento de moco o flema? (1=S√≠, 0=No): "))
    dolor_pecho = int(input("¬øSientes dolor o malestar en el pecho al respirar profundamente? (1=S√≠, 0=No): "))
    sangre_esputo = int(input("¬øHas notado sangre en tu esputo o flema? (1=S√≠, 0=No): "))
    sudores_nocturnos = int(input("¬øTienes sudores nocturnos excesivos? (1=S√≠, 0=No): "))
    perdida_peso = int(input("¬øHas perdido peso sin raz√≥n aparente? (1=S√≠, 0=No): "))
    fiebre_noche = int(input("¬øTienes fiebre, especialmente por la tarde o noche? (1=S√≠, 0=No): "))
    fatiga = int(input("¬øTe sientes fatigado o d√©bil con frecuencia? (1=S√≠, 0=No): "))
    ronquera = int(input("¬øTienes ronquera o cambios en tu voz? (1=S√≠, 0=No): "))

    sintomas = {
        "tos": tos,
        "fiebre": fiebre,
        "dificultad_respirar": dificultad_respirar,
        "moco": moco,
        "dolor_pecho": dolor_pecho,
        "sangre_esputo": sangre_esputo,
        "sudores_nocturnos": sudores_nocturnos,
        "perdida_peso": perdida_peso,
        "fiebre_noche": fiebre_noche,
        "fatiga": fatiga,
        "ronquera": ronquera
    }

    # Usar el modelo entrenado para hacer un diagn√≥stico
    X_nuevo = [[sintomas['tos'], sintomas['fiebre'], sintomas['dificultad_respirar'], sintomas['moco'], sintomas['dolor_pecho'],
                sintomas['sangre_esputo'], sintomas['sudores_nocturnos'], sintomas['perdida_peso'], sintomas['fiebre_noche'],
                sintomas['fatiga'], sintomas['ronquera']]]

    diagnostico = modelo.predict(X_nuevo)[0]

    datos_paciente = {
        "CC": CC,
        "Nombre": nombre,
        "Edad": edad,
        "Diagn√≥stico": diagnostico
    }

    lista.agregar_paciente(datos_paciente)

#  Men√∫ Principal 
def menu():
    ruta_excel = "/workspaces/Estructura-datos-sabado/proyecto final/Prueba2.xlsx"
    lista = Lista_enlazada_pacientes()
    lista.cargar_desde_excel(ruta_excel)

    # Crear y entrenar el modelo de √°rbol de decisiones solo una vez
    modelo = crear_y_entrenar_modelo()

    while True:
        print(""" 
=== MEN√ö DE OPCIONES ===
1. Agregar paciente
2. Mostrar pacientes
3. Buscar paciente por c√©dula
4. Eliminar paciente por c√©dula
5. Guardar pacientes en Excel
6. Salir
        """)
        opcion = input("Seleccione una opci√≥n: ").strip()

        if opcion == "1":
            capturar_datos(lista, modelo)

        elif opcion == "2":
            lista.mostrar_lista()

        elif opcion == "3":
            cedula = input("Ingrese la c√©dula a buscar: ").strip()
            lista.buscar_paciente_por_cedula(cedula)

        elif opcion == "4":
            lista.mostrar_lista()
            cedula = input("Ingrese la c√©dula del paciente a eliminar: ").strip()
            eliminado = lista.eliminar_paciente_por_cedula(cedula)
            if eliminado:
                lista.guardar_en_excel(ruta_excel)

        elif opcion == "5":
            lista.guardar_en_excel(ruta_excel)

        elif opcion == "6":
            print("üëã Programa finalizado.")
            break

        else:
            print("‚ùó Opci√≥n no v√°lida. Intente de nuevo.")

#  Iniciar programa 
menu()
